#!/usr/bin/env bash

###############################################################
# Ready Docker
###############################################################
#
# Ensure Docker.app is running and ready to bring containers up
# Designed to be used in environments where you want to bring
# up a container without human interaction.
#
# Example Usage:
#
# readydocker && docker-compose up -d
#
# Expectations:
#
# - Docker should be located at /Applications/Docker.app
# - /tmp/ should be writable
# - docker command should be on $PATH

###############################################################
# Runs when the script exits but only if lock has been obtained
###############################################################
exit_script() {
    if [[ -e /tmp/readydocker.lock ]]; then
        echo "Removing /tmp/readydocker.lock"
        rm /tmp/readydocker.lock
    fi
    # Clear trap
    trap - SIGINT SIGTERM
    kill -- -$$
}

##############################################################
# Returns the status code of docker stats which will be 0
# if successful
##############################################################
is_docker_ready() {
    docker stats --no-stream >/dev/null 2>&1
}

# Wait until another process has released the lock
while [[ -e /tmp/readydocker.lock ]]; do
    echo "Waiting for readydocker to release lock"
    sleep 1
done

# Adds lock to be work with concurrent readydocker commands
echo "Obtaining /tmp/docker.lock"
touch /tmp/readydocker.lock

# Register clean up if we are SIGINT/TERM'd
trap exit_script SIGINT SIGTERM

echo "Checking if docker is running"
if ! is_docker_ready ; then
    echo "Starting Docker.app"
    open /Applications/Docker.app

    echo "Waiting for Docker.app"
    while ! is_docker_ready ; do
        echo -n "."
        sleep 1
    done
else
    echo "Docker.app is already running and ready"
fi

# Remove the lock
echo "Removing /tmp/readydocker.lock"
rm /tmp/readydocker.lock
